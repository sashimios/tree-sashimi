--- rockbox-utility/rbutil/libtools.make	2022-04-08 23:33:46.727536342 +0000
+++ rockbox-utility.ppc/rbutil/libtools.make	2022-04-08 23:34:28.833165949 +0000
@@ -69,24 +69,6 @@
 endif
 $(info Compiler creates $(COMPILETARGET) binaries)
 
-# OS X specifics. Needs to consider cross compiling for Windows.
-ifeq ($(findstring APPLE,$(CPPDEFINES)),APPLE)
-# When building for 10.4+ we need to use gcc. Otherwise clang is used, so use
-# that to determine if we need to set arch and isysroot.
-ifeq ($(findstring __clang__,$(CPPDEFINES)),__clang__)
-GCCFLAGS += -mmacosx-version-min=10.5
-else
-# when building libs for OS X 10.4+ build for both i386 and ppc at the same time.
-# This creates fat objects, and ar can only create the archive but not operate
-# on it. As a result the ar call must NOT use the u (update) flag.
-ARCHFLAGS += -arch ppc -arch i386
-# building against SDK 10.4 is not compatible with gcc-4.2 (default on newer Xcode)
-# might need adjustment for older Xcode.
-CC = gcc-4.0
-GCCFLAGS += -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4
-endif
-endif
-
 BUILD_DIR ?= $(TARGET_DIR)build$(COMPILETARGET)
 OBJDIR = $(abspath $(BUILD_DIR))/
 
--- rockbox-utility/tools/rbspeex/Makefile	2022-04-08 23:33:46.789529907 +0000
+++ rockbox-utility.ppc/tools/rbspeex/Makefile	2022-04-08 23:36:57.195765828 +0000
@@ -27,38 +27,6 @@
 CFLAGS += $(SPEEXOPTS) $(INCLUDES) -O3 -fomit-frame-pointer -Wno-unused-parameter
 
 CPPDEFINES := $(shell echo foo | $(CROSS)$(CC) -dM -E -)
-#build standalone win32 executables on cygwin
-ifeq ($(findstring CYGWIN,$(CPPDEFINES)),CYGWIN)
-CFLAGS+=-mno-cygwin
-COMPILETARGET = cygwin
-else
-ifeq ($(findstring MINGW,$(CPPDEFINES)),MINGW)
-COMPILETARGET = mingw
-else
-# OS X specifics. Needs to consider cross compiling for Windows.
-ifeq ($(findstring APPLE,$(CPPDEFINES)),APPLE)
-# When building for 10.4+ we need to use gcc. Otherwise clang is used, so use
-# that to determine if we need to set arch and isysroot.
-ifeq ($(findstring __clang__,$(CPPDEFINES)),__clang__)
-CFLAGS += -mmacosx-version-min=10.5
-else
-# when building libs for OS X 10.4+ build for both i386 and ppc at the same time.
-# This creates fat objects, and ar can only create the archive but not operate
-# on it. As a result the ar call must NOT use the u (update) flag.
-ARCHFLAGS += -arch ppc -arch i386
-# building against SDK 10.4 is not compatible with gcc-4.2 (default on newer Xcode)
-# might need adjustment for older Xcode.
-CC = gcc-4.0
-CFLAGS += -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4
-NATIVECC ?= gcc-4.0
-endif
-COMPILETARGET = darwin
-else
-COMPILETARGET = posix
-endif
-endif
-endif
-$(info Compiler creates $(COMPILETARGET) binaries)
 
 # don't try to use the systems libspeex when building a static binary.
 ifndef STATIC
--- rockbox-utility/tools/ucl/src/Makefile	2022-04-08 23:33:46.793529492 +0000
+++ rockbox-utility.ppc/tools/ucl/src/Makefile	2022-04-08 23:37:05.421911922 +0000
@@ -23,37 +23,6 @@
 endif
 
 CPPDEFINES := $(shell echo foo | $(CROSS)$(CC) -dM -E -)
-#build standalone win32 executables on cygwin
-ifeq ($(findstring CYGWIN,$(CPPDEFINES)),CYGWIN)
-COMPILETARGET = cygwin
-else
-ifeq ($(findstring MINGW,$(CPPDEFINES)),MINGW)
-COMPILETARGET = mingw
-else
-# OS X specifics. Needs to consider cross compiling for Windows.
-ifeq ($(findstring APPLE,$(CPPDEFINES)),APPLE)
-# When building for 10.4+ we need to use gcc. Otherwise clang is used, so use
-# that to determine if we need to set arch and isysroot.
-ifeq ($(findstring __clang__,$(CPPDEFINES)),__clang__)
-CFLAGS += -mmacosx-version-min=10.5
-else
-# when building libs for OS X 10.4+ build for both i386 and ppc at the same time.
-# This creates fat objects, and ar can only create the archive but not operate
-# on it. As a result the ar call must NOT use the u (update) flag.
-ARCHFLAGS += -arch ppc -arch i386
-# building against SDK 10.4 is not compatible with gcc-4.2 (default on newer Xcode)
-# might need adjustment for older Xcode.
-CC = gcc-4.0
-CFLAGS += -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4
-NATIVECC ?= gcc-4.0
-endif
-COMPILETARGET = darwin
-else
-COMPILETARGET = posix
-endif
-endif
-endif
-$(info Compiler creates $(COMPILETARGET) binaries)
 
 TARGET_DIR ?= $(shell pwd)/
 OBJDIR = $(TARGET_DIR)build$(RBARCH)
